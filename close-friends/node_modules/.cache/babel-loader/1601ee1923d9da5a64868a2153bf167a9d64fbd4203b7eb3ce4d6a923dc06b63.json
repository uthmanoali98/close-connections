{"ast":null,"code":"var _jsxFileName = \"/Users/uthmanoali98/close-friends/src/components/Card/Card.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport \"./Card.css\";\nimport cardBackSvg from \"../../assets/close-connections-purple-background.svg\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CardGame = () => {\n  _s();\n  const [cards, setCards] = useState([{\n    id: 0,\n    flipped: false\n  }]);\n  const [currentCard, setCurrentCard] = useState(0);\n  const [isFlipping, setIsFlipping] = useState(false); // Track flipping animation\n\n  const handleClick = () => {\n    if (isFlipping) return; // Prevent multiple clicks during animation\n\n    setIsFlipping(true);\n    setTimeout(() => {\n      const updatedCards = [...cards];\n      updatedCards[currentCard].flipped = true;\n\n      // Add a new card after the current one flips\n      const newCard = {\n        id: cards.length,\n        flipped: false\n      };\n      updatedCards.push(newCard);\n      setCards(updatedCards);\n      setCurrentCard(currentCard + 1);\n\n      // Allow sliding effect for the next card\n      setTimeout(() => {\n        setIsFlipping(false);\n      }, 800); // Match the duration of the flip animation\n    }, 800); // Match the duration of the flip animation\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"card-container\",\n    children: cards.map((card, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `card ${index === currentCard && isFlipping ? \"flipping\" : card.flipped ? \"flipped shifted\" : \"\"}`,\n      style: {\n        zIndex: cards.length - index // Ensure the top card is on top\n      },\n      onClick: index === currentCard && !isFlipping ? handleClick : null,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card-back\",\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: cardBackSvg,\n          alt: \"Card Back\",\n          className: \"card-image\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card-front\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Question #\", card.id + 1]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 21\n      }, this)]\n    }, card.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 17\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 9\n  }, this);\n};\n_s(CardGame, \"U0ptffGuIQcx1RjunzDGT/1ZFmU=\");\n_c = CardGame;\nexport default CardGame;\nvar _c;\n$RefreshReg$(_c, \"CardGame\");","map":{"version":3,"names":["React","useState","cardBackSvg","jsxDEV","_jsxDEV","CardGame","_s","cards","setCards","id","flipped","currentCard","setCurrentCard","isFlipping","setIsFlipping","handleClick","setTimeout","updatedCards","newCard","length","push","className","children","map","card","index","style","zIndex","onClick","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/uthmanoali98/close-friends/src/components/Card/Card.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport \"./Card.css\";\nimport cardBackSvg from \"../../assets/close-connections-purple-background.svg\";\n\nconst CardGame = () => {\n    const [cards, setCards] = useState([{ id: 0, flipped: false }]);\n    const [currentCard, setCurrentCard] = useState(0);\n    const [isFlipping, setIsFlipping] = useState(false); // Track flipping animation\n\n    const handleClick = () => {\n        if (isFlipping) return; // Prevent multiple clicks during animation\n\n        setIsFlipping(true);\n\n        setTimeout(() => {\n            const updatedCards = [...cards];\n            updatedCards[currentCard].flipped = true;\n\n            // Add a new card after the current one flips\n            const newCard = { id: cards.length, flipped: false };\n            updatedCards.push(newCard);\n\n\n            setCards(updatedCards);\n            setCurrentCard(currentCard + 1);\n\n            // Allow sliding effect for the next card\n            setTimeout(() => {\n                setIsFlipping(false);\n            }, 800); // Match the duration of the flip animation\n        }, 800); // Match the duration of the flip animation\n    };\n\n    return (\n        <div className=\"card-container\">\n            {cards.map((card, index) => (\n                <div\n                    key={card.id}\n                    className={`card ${index === currentCard && isFlipping\n                        ? \"flipping\"\n                        : card.flipped\n                            ? \"flipped shifted\"\n                            : \"\"\n                        }`}\n                    style={{\n                        zIndex: cards.length - index, // Ensure the top card is on top\n                    }}\n                    onClick={index === currentCard && !isFlipping ? handleClick : null}\n                >\n                    <div className=\"card-back\">\n                        <img\n                            src={cardBackSvg}\n                            alt=\"Card Back\"\n                            className=\"card-image\"\n                        />\n                    </div>\n                    <div className=\"card-front\">\n                        <p>Question #{card.id + 1}</p>\n                    </div>\n                </div>\n            ))}\n        </div>\n    );\n};\n\nexport default CardGame;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}