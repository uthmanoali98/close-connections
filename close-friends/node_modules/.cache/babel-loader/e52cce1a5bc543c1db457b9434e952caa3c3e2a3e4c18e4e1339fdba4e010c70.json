{"ast":null,"code":"var _jsxFileName = \"/Users/uthmanoali98/close-friends/src/components/Card/Card.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport \"./Card.css\";\nimport cardBackSvg from \"../../assets/close-connections-purple-background.svg\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CardGame = () => {\n  _s();\n  const [cards, setCards] = useState([{\n    id: 0,\n    flipped: false,\n    used: false\n  }]);\n  const [currentCard, setCurrentCard] = useState(0);\n  const handleFlip = () => {\n    const updatedCards = [...cards];\n    updatedCards[currentCard].flipped = true; // Flip the current card to show the front\n    setCards(updatedCards);\n  };\n  const handleMoveToUsed = () => {\n    const updatedCards = [...cards];\n    updatedCards[currentCard].used = true; // Mark the card as \"used\"\n    setCards(updatedCards);\n\n    // Add a new card to the pile\n    const newCard = {\n      id: cards.length,\n      flipped: false,\n      used: false\n    };\n    updatedCards.push(newCard);\n    setCards(updatedCards);\n\n    // Move to the next card in the pile\n    setCurrentCard(currentCard + 1);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"card-container\",\n    children: cards.map((card, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `card ${card.flipped ? \"flipped\" : \"\" // Flip to show the front\n      } ${card.used ? \"used\" : \"\"}` // Move to the used pile\n      ,\n      style: {\n        zIndex: cards.length - index // Ensure the top card is on top\n      },\n      onClick: index === currentCard && !card.used ? card.flipped ? handleMoveToUsed // Move to used pile if already flipped\n      : handleFlip // Flip the card\n      : null,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card-back\",\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: cardBackSvg,\n          alt: \"Card Back\",\n          className: \"card-image\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card-front\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Question #\", card.id + 1]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 21\n      }, this)]\n    }, card.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 17\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 9\n  }, this);\n};\n_s(CardGame, \"w7dkhkknCPmgjQD/aWAAZ3eat0M=\");\n_c = CardGame;\nexport default CardGame;\nvar _c;\n$RefreshReg$(_c, \"CardGame\");","map":{"version":3,"names":["React","useState","cardBackSvg","jsxDEV","_jsxDEV","CardGame","_s","cards","setCards","id","flipped","used","currentCard","setCurrentCard","handleFlip","updatedCards","handleMoveToUsed","newCard","length","push","className","children","map","card","index","style","zIndex","onClick","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/uthmanoali98/close-friends/src/components/Card/Card.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport \"./Card.css\";\nimport cardBackSvg from \"../../assets/close-connections-purple-background.svg\";\n\nconst CardGame = () => {\n    const [cards, setCards] = useState([{ id: 0, flipped: false, used: false }]);\n    const [currentCard, setCurrentCard] = useState(0);\n\n    const handleFlip = () => {\n        const updatedCards = [...cards];\n        updatedCards[currentCard].flipped = true; // Flip the current card to show the front\n        setCards(updatedCards);\n    };\n\n    const handleMoveToUsed = () => {\n        const updatedCards = [...cards];\n        updatedCards[currentCard].used = true; // Mark the card as \"used\"\n        setCards(updatedCards);\n\n        // Add a new card to the pile\n        const newCard = { id: cards.length, flipped: false, used: false };\n        updatedCards.push(newCard);\n        setCards(updatedCards);\n\n        // Move to the next card in the pile\n        setCurrentCard(currentCard + 1);\n    };\n\n    return (\n        <div className=\"card-container\">\n            {cards.map((card, index) => (\n                <div\n                    key={card.id}\n                    className={`card ${card.flipped ? \"flipped\" : \"\" // Flip to show the front\n                        } ${card.used ? \"used\" : \"\"}`} // Move to the used pile\n                    style={{\n                        zIndex: cards.length - index, // Ensure the top card is on top\n                    }}\n                    onClick={\n                        index === currentCard && !card.used\n                            ? card.flipped\n                                ? handleMoveToUsed // Move to used pile if already flipped\n                                : handleFlip // Flip the card\n                            : null\n                    }\n                >\n                    <div className=\"card-back\">\n                        <img\n                            src={cardBackSvg}\n                            alt=\"Card Back\"\n                            className=\"card-image\"\n                        />\n                    </div>\n                    <div className=\"card-front\">\n                        <p>Question #{card.id + 1}</p>\n                    </div>\n                </div>\n            ))}\n        </div>\n    );\n};\n\nexport default CardGame;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAO,YAAY;AACnB,OAAOC,WAAW,MAAM,sDAAsD;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/E,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACnB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGP,QAAQ,CAAC,CAAC;IAAEQ,EAAE,EAAE,CAAC;IAAEC,OAAO,EAAE,KAAK;IAAEC,IAAI,EAAE;EAAM,CAAC,CAAC,CAAC;EAC5E,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGZ,QAAQ,CAAC,CAAC,CAAC;EAEjD,MAAMa,UAAU,GAAGA,CAAA,KAAM;IACrB,MAAMC,YAAY,GAAG,CAAC,GAAGR,KAAK,CAAC;IAC/BQ,YAAY,CAACH,WAAW,CAAC,CAACF,OAAO,GAAG,IAAI,CAAC,CAAC;IAC1CF,QAAQ,CAACO,YAAY,CAAC;EAC1B,CAAC;EAED,MAAMC,gBAAgB,GAAGA,CAAA,KAAM;IAC3B,MAAMD,YAAY,GAAG,CAAC,GAAGR,KAAK,CAAC;IAC/BQ,YAAY,CAACH,WAAW,CAAC,CAACD,IAAI,GAAG,IAAI,CAAC,CAAC;IACvCH,QAAQ,CAACO,YAAY,CAAC;;IAEtB;IACA,MAAME,OAAO,GAAG;MAAER,EAAE,EAAEF,KAAK,CAACW,MAAM;MAAER,OAAO,EAAE,KAAK;MAAEC,IAAI,EAAE;IAAM,CAAC;IACjEI,YAAY,CAACI,IAAI,CAACF,OAAO,CAAC;IAC1BT,QAAQ,CAACO,YAAY,CAAC;;IAEtB;IACAF,cAAc,CAACD,WAAW,GAAG,CAAC,CAAC;EACnC,CAAC;EAED,oBACIR,OAAA;IAAKgB,SAAS,EAAC,gBAAgB;IAAAC,QAAA,EAC1Bd,KAAK,CAACe,GAAG,CAAC,CAACC,IAAI,EAAEC,KAAK,kBACnBpB,OAAA;MAEIgB,SAAS,EAAE,QAAQG,IAAI,CAACb,OAAO,GAAG,SAAS,GAAG,EAAE,CAAC;MAAA,IACzCa,IAAI,CAACZ,IAAI,GAAG,MAAM,GAAG,EAAE,EAAG,CAAC;MAAA;MACnCc,KAAK,EAAE;QACHC,MAAM,EAAEnB,KAAK,CAACW,MAAM,GAAGM,KAAK,CAAE;MAClC,CAAE;MACFG,OAAO,EACHH,KAAK,KAAKZ,WAAW,IAAI,CAACW,IAAI,CAACZ,IAAI,GAC7BY,IAAI,CAACb,OAAO,GACRM,gBAAgB,CAAC;MAAA,EACjBF,UAAU,CAAC;MAAA,EACf,IACT;MAAAO,QAAA,gBAEDjB,OAAA;QAAKgB,SAAS,EAAC,WAAW;QAAAC,QAAA,eACtBjB,OAAA;UACIwB,GAAG,EAAE1B,WAAY;UACjB2B,GAAG,EAAC,WAAW;UACfT,SAAS,EAAC;QAAY;UAAAU,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACzB;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACD,CAAC,eACN7B,OAAA;QAAKgB,SAAS,EAAC,YAAY;QAAAC,QAAA,eACvBjB,OAAA;UAAAiB,QAAA,GAAG,YAAU,EAACE,IAAI,CAACd,EAAE,GAAG,CAAC;QAAA;UAAAqB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC7B,CAAC;IAAA,GAvBDV,IAAI,CAACd,EAAE;MAAAqB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAwBX,CACR;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACD,CAAC;AAEd,CAAC;AAAC3B,EAAA,CAxDID,QAAQ;AAAA6B,EAAA,GAAR7B,QAAQ;AA0Dd,eAAeA,QAAQ;AAAC,IAAA6B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}